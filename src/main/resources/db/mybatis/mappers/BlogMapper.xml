<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.mybatis.example.BlogMapper">
    <select id="selectBlog" resultMap="blog">
        SELECT
        blog.id as blog_id,
        blog.title as blog_title,
        blog.description as blog_description,
        blog.content as blog_conent,
        blog.update_at as blog_update_at,
        blog.create_at as blog_create_at,
        user.id as user_id,
        user.username as user_username,
        user.avatar as user_avatar,
        user.update_at as user_update_at,
        user.create_at as user_create_at
        FROM blog
        LEFT OUTER JOIN user
        ON blog.user_id = user.id
        <if test="user_id != null">
            WHERE blog.user_id = #{user_id}
        </if>
        ORDER BY user_update_at desc
        limit ${offset}, #{limit}
    </select>
    <select id="countBlog" resultType="int">
        SELECT count(*) FROM blog
        <if test="user_id != null">
            WHERE user_id = #{userId}
        </if>
    </select>

    <insert id="insertBlog" parameterType="blog" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        INSERT INTO blog (user_id, title, description, content, create_at, update_at)
        VALUES (#{userId}, #{title}, #{description}, #{content}, now(), now())
    </insert>

    <update id="updateBlog" parameterType="blog">
        UPDATE blog
        SET title       = #{title},
            content     = #{content},
            description = #{description},
            update_at  = now()
        WHERE id = #{id}
    </update>

    <select id="selectBlogById" resultMap="blog">
        SELECT blog.id          as blog_id,
               blog.title       as blog_title,
               blog.description as blog_description,
               blog.content     as blog_content,
               blog.update_at  as blog_update_at,
               blog.create_at  as blog_create_at,
               user.id          as user_id,
               user.username    as user_username,
               user.avatar      as user_avatar,
               user.update_at  as user_update_at,
               user.create_at  as user_create_at
        FROM blog
                 LEFT OUTER JOIN user
                                 ON blog.user_id = user.id
        WHERE blog.id = #{id}
    </select>

    <delete id="deleteBlog" parameterType="int">
        DELETE
        FROM blog
        WHERE id = #{id}
    </delete>

    <resultMap id="blog" type="blog">
        <id property="id" column="blog_id"/>
        <id property="userId" column="user_id"/>
        <result property="title" column="blog_title"/>
        <result property="description" column="blog_description"/>
        <result property="content" column="blog_content"/>
        <result property="updateAt" column="blog_update_at"/>
        <result property="createAt" column="blog_create_at"/>
        <association property="user" javaType="user">
            <id property="id" column="user_id"/>
            <result property="username" column="user_username"/>
            <result property="avatar" column="user_avatar"/>
            <result property="updateAt" column="user_update_at"/>
            <result property="createAt" column="user_create_at"/>
        </association>
    </resultMap>
</mapper>